import json
from datetime import datetime, timedelta
from typing import Dict, List, Union

def calculate_portfolio_metrics(portfolio_data: str) -> str:
    """
    Calcula m√©tricas importantes de uma carteira de investimentos.
    
    Args:
        portfolio_data: JSON string com dados da carteira no formato:
        {"assets": [{"symbol": "AAPL", "quantity": 10, "avg_price": 150}]}
        
    Returns:
        String com an√°lise da carteira formatada em markdown
    """
    try:
        data = json.loads(portfolio_data)
        assets = data.get("assets", [])
        
        if not assets:
            return "‚ùå Nenhum ativo fornecido na carteira."
        
        output = "# üìä An√°lise de Carteira de Investimentos\n\n"
        output += f"*An√°lise realizada em: {datetime.now().strftime('%d/%m/%Y %H:%M')}*\n\n"
        
        total_invested = 0
        output += "## üíº Posi√ß√µes da Carteira\n\n"
        output += "| Ativo | Quantidade | Pre√ßo M√©dio | Investido |\n"
        output += "|-------|------------|-------------|------------|\n"
        
        for asset in assets:
            symbol = asset.get("symbol", "N/A")
            quantity = asset.get("quantity", 0)
            avg_price = asset.get("avg_price", 0)
            invested = quantity * avg_price
            total_invested += invested
            
            output += f"| {symbol} | {quantity} | ${avg_price:.2f} | ${invested:.2f} |\n"
        
        output += f"\n**üí∞ Total Investido:** ${total_invested:,.2f}\n\n"
        
        # M√©tricas b√°sicas
        output += "## üìà M√©tricas Calculadas\n\n"
        output += f"‚Ä¢ **N√∫mero de Ativos:** {len(assets)}\n"
        output += f"‚Ä¢ **Investimento Total:** ${total_invested:,.2f}\n"
        output += f"‚Ä¢ **Maior Posi√ß√£o:** ${max([a['quantity'] * a['avg_price'] for a in assets]):,.2f}\n"
        output += f"‚Ä¢ **Menor Posi√ß√£o:** ${min([a['quantity'] * a['avg_price'] for a in assets]):,.2f}\n\n"
        
        # Concentra√ß√£o
        output += "## ‚öñÔ∏è An√°lise de Concentra√ß√£o\n\n"
        for asset in assets:
            weight = (asset['quantity'] * asset['avg_price']) / total_invested * 100
            risk_level = "üî¥ Alto" if weight > 40 else "üü° M√©dio" if weight > 20 else "üü¢ Baixo"
            output += f"‚Ä¢ **{asset['symbol']}:** {weight:.1f}% - Risco: {risk_level}\n"
        
        output += "\n## üí° Recomenda√ß√µes\n\n"
        output += "‚Ä¢ Use as ferramentas YFinance ou OpenBB para obter pre√ßos atuais\n"
        output += "‚Ä¢ Considere rebalanceamento se algum ativo > 40% da carteira\n"
        output += "‚Ä¢ Monitore correla√ß√£o entre ativos para diversifica√ß√£o\n\n"
        
        output += "---\n"
        output += "**‚ö†Ô∏è Disclaimer:** Esta an√°lise √© apenas educacional e n√£o constitui recomenda√ß√£o de investimento."
        
        return output
        
    except json.JSONDecodeError:
        return "‚ùå Erro: Formato JSON inv√°lido. Use: {\"assets\": [{\"symbol\": \"AAPL\", \"quantity\": 10, \"avg_price\": 150}]}"
    except Exception as e:
        return f"‚ùå Erro ao calcular m√©tricas: {str(e)}"
